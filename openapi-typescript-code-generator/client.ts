// 
// Generated by @himenon/openapi-typescript-code-generator v0.13.0
// 
// OpenApi : 3.0.2
// 
// License  : Apache 2.0
// Url      : http://www.apache.org/licenses/LICENSE-2.0.html
// 


export namespace Schemas {
    export interface Order {
        id?: number;
        petId?: number;
        quantity?: number;
        shipDate?: string;
        /** Order Status */
        status?: "placed" | "approved" | "delivered";
        complete?: boolean;
    }
    export interface Customer {
        id?: number;
        username?: string;
        address?: Schemas.Address[];
    }
    export interface Address {
        street?: string;
        city?: string;
        state?: string;
        zip?: string;
    }
    export interface Category {
        id?: number;
        name?: string;
    }
    export interface User {
        id?: number;
        username?: string;
        firstName?: string;
        lastName?: string;
        email?: string;
        password?: string;
        phone?: string;
        /** User Status */
        userStatus?: number;
    }
    export interface Tag {
        id?: number;
        name?: string;
    }
    export interface Pet {
        id?: number;
        name: string;
        category?: Schemas.Category;
        photoUrls: string[];
        tags?: Schemas.Tag[];
        /** pet status in the store */
        status?: "available" | "pending" | "sold";
    }
    export interface ApiResponse {
        code?: number;
        type?: string;
        message?: string;
    }
}
export namespace RequestBodies {
    /** Pet object that needs to be added to the store */
    export namespace Pet {
        export interface Content {
            "application/json": Schemas.Pet;
            "application/xml": Schemas.Pet;
        }
    }
    /** List of user object */
    export namespace UserArray {
        export interface Content {
            "application/json": Schemas.User[];
        }
    }
}
export interface RequestBody$updatePet {
    "application/json": Schemas.Pet;
    "application/xml": Schemas.Pet;
    "application/x-www-form-urlencoded": Schemas.Pet;
}
export interface Response$updatePet$Status$200 {
    "application/xml": Schemas.Pet;
    "application/json": Schemas.Pet;
}
export interface RequestBody$addPet {
    "application/json": Schemas.Pet;
    "application/xml": Schemas.Pet;
    "application/x-www-form-urlencoded": Schemas.Pet;
}
export interface Response$addPet$Status$200 {
    "application/xml": Schemas.Pet;
    "application/json": Schemas.Pet;
}
export interface Parameter$findPetsByStatus {
    /** Status values that need to be considered for filter */
    status?: "available" | "pending" | "sold";
}
export interface Response$findPetsByStatus$Status$200 {
    "application/xml": Schemas.Pet[];
    "application/json": Schemas.Pet[];
}
export interface Parameter$findPetsByTags {
    /** Tags to filter by */
    tags?: string[];
}
export interface Response$findPetsByTags$Status$200 {
    "application/xml": Schemas.Pet[];
    "application/json": Schemas.Pet[];
}
export interface Parameter$getPetById {
    /** ID of pet to return */
    petId: number;
}
export interface Response$getPetById$Status$200 {
    "application/xml": Schemas.Pet;
    "application/json": Schemas.Pet;
}
export interface Parameter$updatePetWithForm {
    /** ID of pet that needs to be updated */
    petId: number;
    /** Name of pet that needs to be updated */
    name?: string;
    /** Status of pet that needs to be updated */
    status?: string;
}
export interface Parameter$deletePet {
    api_key?: string;
    /** Pet id to delete */
    petId: number;
}
export interface Parameter$uploadFile {
    /** ID of pet to update */
    petId: number;
    /** Additional Metadata */
    additionalMetadata?: string;
}
export interface RequestBody$uploadFile {
    "application/octet-stream": string;
}
export interface Response$uploadFile$Status$200 {
    "application/json": Schemas.ApiResponse;
}
export interface Response$getInventory$Status$200 {
    "application/json": {
        [key: string]: number;
    };
}
export interface RequestBody$placeOrder {
    "application/json": Schemas.Order;
    "application/xml": Schemas.Order;
    "application/x-www-form-urlencoded": Schemas.Order;
}
export interface Response$placeOrder$Status$200 {
    "application/json": Schemas.Order;
}
export interface Parameter$getOrderById {
    /** ID of order that needs to be fetched */
    orderId: number;
}
export interface Response$getOrderById$Status$200 {
    "application/xml": Schemas.Order;
    "application/json": Schemas.Order;
}
export interface Parameter$deleteOrder {
    /** ID of the order that needs to be deleted */
    orderId: number;
}
export interface RequestBody$createUser {
    "application/json": Schemas.User;
    "application/xml": Schemas.User;
    "application/x-www-form-urlencoded": Schemas.User;
}
export interface Response$createUser$Status$default {
    "application/json": Schemas.User;
    "application/xml": Schemas.User;
}
export interface RequestBody$createUsersWithListInput {
    "application/json": Schemas.User[];
}
export interface Response$createUsersWithListInput$Status$200 {
    "application/xml": Schemas.User;
    "application/json": Schemas.User;
}
export interface Parameter$loginUser {
    /** The user name for login */
    username?: string;
    /** The password for login in clear text */
    password?: string;
}
export interface Response$loginUser$Status$200 {
    "application/xml": string;
    "application/json": string;
}
export interface Parameter$getUserByName {
    /** The name that needs to be fetched. Use user1 for testing.  */
    username: string;
}
export interface Response$getUserByName$Status$200 {
    "application/xml": Schemas.User;
    "application/json": Schemas.User;
}
export interface Parameter$updateUser {
    /** name that need to be deleted */
    username: string;
}
export interface RequestBody$updateUser {
    "application/json": Schemas.User;
    "application/xml": Schemas.User;
    "application/x-www-form-urlencoded": Schemas.User;
}
export interface Parameter$deleteUser {
    /** The name that needs to be deleted */
    username: string;
}
export type RequestContentType$updatePet = keyof RequestBody$updatePet;
export type ResponseContentType$updatePet = keyof Response$updatePet$Status$200;
export interface Params$updatePet<T extends RequestContentType$updatePet, U extends ResponseContentType$updatePet> {
    headers: {
        "Content-Type": T;
        Accept: U;
    };
    requestBody: RequestBody$updatePet[T];
}
export type RequestContentType$addPet = keyof RequestBody$addPet;
export type ResponseContentType$addPet = keyof Response$addPet$Status$200;
export interface Params$addPet<T extends RequestContentType$addPet, U extends ResponseContentType$addPet> {
    headers: {
        "Content-Type": T;
        Accept: U;
    };
    requestBody: RequestBody$addPet[T];
}
export type ResponseContentType$findPetsByStatus = keyof Response$findPetsByStatus$Status$200;
export interface Params$findPetsByStatus<U extends ResponseContentType$findPetsByStatus> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$findPetsByStatus;
}
export type ResponseContentType$findPetsByTags = keyof Response$findPetsByTags$Status$200;
export interface Params$findPetsByTags<U extends ResponseContentType$findPetsByTags> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$findPetsByTags;
}
export type ResponseContentType$getPetById = keyof Response$getPetById$Status$200;
export interface Params$getPetById<U extends ResponseContentType$getPetById> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$getPetById;
}
export interface Params$updatePetWithForm {
    parameter: Parameter$updatePetWithForm;
}
export interface Params$deletePet {
    parameter: Parameter$deletePet;
}
export type RequestContentType$uploadFile = keyof RequestBody$uploadFile;
export type ResponseContentType$uploadFile = keyof Response$uploadFile$Status$200;
export interface Params$uploadFile {
    parameter: Parameter$uploadFile;
    requestBody: RequestBody$uploadFile["application/octet-stream"];
}
export type ResponseContentType$getInventory = keyof Response$getInventory$Status$200;
export type RequestContentType$placeOrder = keyof RequestBody$placeOrder;
export type ResponseContentType$placeOrder = keyof Response$placeOrder$Status$200;
export interface Params$placeOrder<T extends RequestContentType$placeOrder> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$placeOrder[T];
}
export type ResponseContentType$getOrderById = keyof Response$getOrderById$Status$200;
export interface Params$getOrderById<U extends ResponseContentType$getOrderById> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$getOrderById;
}
export interface Params$deleteOrder {
    parameter: Parameter$deleteOrder;
}
export type RequestContentType$createUser = keyof RequestBody$createUser;
export interface Params$createUser<T extends RequestContentType$createUser> {
    headers: {
        "Content-Type": T;
    };
    requestBody: RequestBody$createUser[T];
}
export type RequestContentType$createUsersWithListInput = keyof RequestBody$createUsersWithListInput;
export type ResponseContentType$createUsersWithListInput = keyof Response$createUsersWithListInput$Status$200;
export interface Params$createUsersWithListInput<U extends ResponseContentType$createUsersWithListInput> {
    headers: {
        Accept: U;
    };
    requestBody: RequestBody$createUsersWithListInput["application/json"];
}
export type ResponseContentType$loginUser = keyof Response$loginUser$Status$200;
export interface Params$loginUser<U extends ResponseContentType$loginUser> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$loginUser;
}
export type ResponseContentType$getUserByName = keyof Response$getUserByName$Status$200;
export interface Params$getUserByName<U extends ResponseContentType$getUserByName> {
    headers: {
        Accept: U;
    };
    parameter: Parameter$getUserByName;
}
export type RequestContentType$updateUser = keyof RequestBody$updateUser;
export interface Params$updateUser<T extends RequestContentType$updateUser> {
    headers: {
        "Content-Type": T;
    };
    parameter: Parameter$updateUser;
    requestBody: RequestBody$updateUser[T];
}
export interface Params$deleteUser {
    parameter: Parameter$deleteUser;
}
export type HttpMethod = "GET" | "PUT" | "POST" | "DELETE" | "OPTIONS" | "HEAD" | "PATCH" | "TRACE";
export interface ObjectLike {
    [key: string]: any;
}
export interface QueryParameter {
    value: any;
    style?: "form" | "spaceDelimited" | "pipeDelimited" | "deepObject";
    explode: boolean;
}
export interface QueryParameters {
    [key: string]: QueryParameter;
}
export type SuccessResponses = Response$updatePet$Status$200 | Response$addPet$Status$200 | Response$findPetsByStatus$Status$200 | Response$findPetsByTags$Status$200 | Response$getPetById$Status$200 | Response$uploadFile$Status$200 | Response$getInventory$Status$200 | Response$placeOrder$Status$200 | Response$getOrderById$Status$200 | Response$createUsersWithListInput$Status$200 | Response$loginUser$Status$200 | Response$getUserByName$Status$200;
export namespace ErrorResponse {
    export type updatePet = void;
    export type addPet = void;
    export type findPetsByStatus = void;
    export type findPetsByTags = void;
    export type getPetById = void;
    export type updatePetWithForm = void;
    export type deletePet = void;
    export type uploadFile = void;
    export type getInventory = void;
    export type placeOrder = void;
    export type getOrderById = void;
    export type deleteOrder = void;
    export type createUser = void;
    export type createUsersWithListInput = void;
    export type loginUser = void;
    export type logoutUser = void;
    export type getUserByName = void;
    export type updateUser = void;
    export type deleteUser = void;
}
export interface ApiClient<RequestOption> {
    request: <T = SuccessResponses>(httpMethod: HttpMethod, url: string, headers: ObjectLike | any, requestBody: ObjectLike | any, queryParameters: QueryParameters | undefined, options?: RequestOption) => Promise<T>;
}
export class Client<RequestOption> {
    private baseUrl: string;
    constructor(private apiClient: ApiClient<RequestOption>, baseUrl: string) { this.baseUrl = baseUrl.replace(/\/$/, ""); }
    /**
     * Update an existing pet
     * Update an existing pet by Id
     */
    public async updatePet<RequestContentType extends RequestContentType$updatePet, ResponseContentType extends ResponseContentType$updatePet>(params: Params$updatePet<RequestContentType, ResponseContentType>, option?: RequestOption): Promise<Response$updatePet$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/pet`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: params.headers.Accept
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Add a new pet to the store
     * Add a new pet to the store
     */
    public async addPet<RequestContentType extends RequestContentType$addPet, ResponseContentType extends ResponseContentType$addPet>(params: Params$addPet<RequestContentType, ResponseContentType>, option?: RequestOption): Promise<Response$addPet$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/pet`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: params.headers.Accept
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     */
    public async findPetsByStatus<ResponseContentType extends ResponseContentType$findPetsByStatus>(params: Params$findPetsByStatus<ResponseContentType>, option?: RequestOption): Promise<Response$findPetsByStatus$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/pet/findByStatus`;
        const headers = {
            Accept: params.headers.Accept
        };
        const queryParameters: QueryParameters = {
            status: { value: params.parameter.status, explode: true }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Finds Pets by tags
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     */
    public async findPetsByTags<ResponseContentType extends ResponseContentType$findPetsByTags>(params: Params$findPetsByTags<ResponseContentType>, option?: RequestOption): Promise<Response$findPetsByTags$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/pet/findByTags`;
        const headers = {
            Accept: params.headers.Accept
        };
        const queryParameters: QueryParameters = {
            tags: { value: params.parameter.tags, explode: true }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /**
     * Find pet by ID
     * Returns a single pet
     */
    public async getPetById<ResponseContentType extends ResponseContentType$getPetById>(params: Params$getPetById<ResponseContentType>, option?: RequestOption): Promise<Response$getPetById$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/pet/${params.parameter.petId}`;
        const headers = {
            Accept: params.headers.Accept
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /** Updates a pet in the store with form data */
    public async updatePetWithForm(params: Params$updatePetWithForm, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/pet/${params.parameter.petId}`;
        const headers = {};
        const queryParameters: QueryParameters = {
            name: { value: params.parameter.name, explode: false },
            status: { value: params.parameter.status, explode: false }
        };
        return this.apiClient.request("POST", url, headers, undefined, queryParameters, option);
    }
    /** Deletes a pet */
    public async deletePet(params: Params$deletePet, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/pet/${params.parameter.petId}`;
        const headers = {
            api_key: params.parameter.api_key
        };
        return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
    }
    /** uploads an image */
    public async uploadFile(params: Params$uploadFile, option?: RequestOption): Promise<Response$uploadFile$Status$200["application/json"]> {
        const url = this.baseUrl + `/pet/${params.parameter.petId}/uploadImage`;
        const headers = {
            "Content-Type": "application/octet-stream",
            Accept: "application/json"
        };
        const queryParameters: QueryParameters = {
            additionalMetadata: { value: params.parameter.additionalMetadata, explode: false }
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, queryParameters, option);
    }
    /**
     * Returns pet inventories by status
     * Returns a map of status codes to quantities
     */
    public async getInventory(option?: RequestOption): Promise<Response$getInventory$Status$200["application/json"]> {
        const url = this.baseUrl + `/store/inventory`;
        const headers = {
            Accept: "application/json"
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Place an order for a pet
     * Place a new order in the store
     */
    public async placeOrder<RequestContentType extends RequestContentType$placeOrder>(params: Params$placeOrder<RequestContentType>, option?: RequestOption): Promise<Response$placeOrder$Status$200["application/json"]> {
        const url = this.baseUrl + `/store/order`;
        const headers = {
            "Content-Type": params.headers["Content-Type"],
            Accept: "application/json"
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Find purchase order by ID
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
     */
    public async getOrderById<ResponseContentType extends ResponseContentType$getOrderById>(params: Params$getOrderById<ResponseContentType>, option?: RequestOption): Promise<Response$getOrderById$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/store/order/${params.parameter.orderId}`;
        const headers = {
            Accept: params.headers.Accept
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Delete purchase order by ID
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     */
    public async deleteOrder(params: Params$deleteOrder, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/store/order/${params.parameter.orderId}`;
        const headers = {};
        return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
    }
    /**
     * Create user
     * This can only be done by the logged in user.
     */
    public async createUser<RequestContentType extends RequestContentType$createUser>(params: Params$createUser<RequestContentType>, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/user`;
        const headers = {
            "Content-Type": params.headers["Content-Type"]
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Creates list of users with given input array
     * Creates list of users with given input array
     */
    public async createUsersWithListInput<ResponseContentType extends ResponseContentType$createUsersWithListInput>(params: Params$createUsersWithListInput<ResponseContentType>, option?: RequestOption): Promise<Response$createUsersWithListInput$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/user/createWithList`;
        const headers = {
            "Content-Type": "application/json",
            Accept: params.headers.Accept
        };
        return this.apiClient.request("POST", url, headers, params.requestBody, undefined, option);
    }
    /** Logs user into the system */
    public async loginUser<ResponseContentType extends ResponseContentType$loginUser>(params: Params$loginUser<ResponseContentType>, option?: RequestOption): Promise<Response$loginUser$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/user/login`;
        const headers = {
            Accept: params.headers.Accept
        };
        const queryParameters: QueryParameters = {
            username: { value: params.parameter.username, explode: false },
            password: { value: params.parameter.password, explode: false }
        };
        return this.apiClient.request("GET", url, headers, undefined, queryParameters, option);
    }
    /** Logs out current logged in user session */
    public async logoutUser(option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/user/logout`;
        const headers = {};
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /** Get user by user name */
    public async getUserByName<ResponseContentType extends ResponseContentType$getUserByName>(params: Params$getUserByName<ResponseContentType>, option?: RequestOption): Promise<Response$getUserByName$Status$200[ResponseContentType]> {
        const url = this.baseUrl + `/user/${params.parameter.username}`;
        const headers = {
            Accept: params.headers.Accept
        };
        return this.apiClient.request("GET", url, headers, undefined, undefined, option);
    }
    /**
     * Update user
     * This can only be done by the logged in user.
     */
    public async updateUser<RequestContentType extends RequestContentType$updateUser>(params: Params$updateUser<RequestContentType>, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/user/${params.parameter.username}`;
        const headers = {
            "Content-Type": params.headers["Content-Type"]
        };
        return this.apiClient.request("PUT", url, headers, params.requestBody, undefined, option);
    }
    /**
     * Delete user
     * This can only be done by the logged in user.
     */
    public async deleteUser(params: Params$deleteUser, option?: RequestOption): Promise<void> {
        const url = this.baseUrl + `/user/${params.parameter.username}`;
        const headers = {};
        return this.apiClient.request("DELETE", url, headers, undefined, undefined, option);
    }
}
